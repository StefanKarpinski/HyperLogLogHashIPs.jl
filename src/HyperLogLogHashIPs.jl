module HyperLogLogHashIPs

export hll_hash_ip

using Sockets
using SHA

function ip_data(addr::IPAddr)
    n = sizeof(addr.host)
    [(addr.host >>> ((n-i) << 3)) % UInt8 for i = 1:n]
end

function ip_join(data::Vector{UInt8})
    host = zero(ip_host_type(data))
    for byte in data
        host <<= 8
        host |= byte
    end
    ip_addr(host)
end

function ip_host_type(data::Vector{UInt8})
    length(data) == 4 ? UInt32 : length(data) == 16 ? UInt128 :
    throw(ArgumentError("IP data must be 4 or 16 bytes, got $(length(data))"))
end

ip_addr(host::UInt32) = IPv4(host)
ip_addr(host::UInt128) = IPv6(host)

# Feistel network with sha256 as round function

const ROUNDS = 16
const DIGEST = SHA.SHA512_CTX

function feistel!(key::Vector{UInt8}, data::Vector{UInt8}, enc::Bool)
    n = length(data)
    m = n >> 1
    rounds = enc ? (0:1:ROUNDS-1) : (ROUNDS-1:-1:0)
    for round in rounds
        digest = DIGEST()
        update!(digest, [round % UInt8])
        update!(digest, key)
        update!(digest, view(data, m+1:n))
        for (i, x) in enumerate(digest!(digest))
            data[mod1(i, m)] ‚äª= x
        end
        round == rounds[end] && break
        for i = 1:m
            data[i], data[m+i] = data[m+i], data[i]
        end
    end
    return data
end

encrypt!(key::Vector{UInt8}, data::Vector{UInt8}) = feistel!(key, data, true)
decrypt!(key::Vector{UInt8}, data::Vector{UInt8}) = feistel!(key, data, false)

const ignore_bits = 2 # 2^2 = 4 collisions
const bucket_mask = 0x0000_0fff # 12 bits
const sample_mask = ~bucket_mask << ignore_bits # 18 bits
const sample_shift = trailing_ones(bucket_mask)

@assert count_ones(bucket_mask & sample_mask) == 0
@assert count_ones(bucket_mask | sample_mask) == 30

function hyper_log_log!(key::Vector{UInt8}, data::Vector{UInt8})
    encrypt!(key, data)
    value = zero(UInt32)
    for i = 1:sizeof(value)
        value <<= 8
        value |= data[i]
    end
    bucket = value & bucket_mask
    sample = value & sample_mask
    sample = leading_ones(sample)
    return UInt16(bucket), UInt8(sample)
end

function snowflake_hll((bucket, sample)::Tuple{UInt16, UInt8})
    data = Base.StringVector(3)
    data[1] = bucket % UInt8
    data[2] = bucket >> 8
    data[3] = sample + 1
    return String(data)
end

const key = [
    0x42, 0x49, 0x80, 0x73, 0xc9, 0xa2, 0x45, 0xa3,
    0x75, 0x6d, 0x48, 0xf0, 0xd3, 0x2d, 0x16, 0x84,
    0xca, 0xfa, 0xfa, 0xec, 0x52, 0xe5, 0x48, 0x65,
    0xcf, 0x1f, 0x4a, 0x34, 0x74, 0x89, 0x49, 0x5c,
    0x9e, 0x84, 0x6f, 0x7b, 0x1e, 0x0a, 0xe4, 0x28,
    0xab, 0x91, 0x5a, 0x9e, 0xb3, 0xe6, 0x36, 0x8e,
    0x15, 0xad, 0x70, 0xa5, 0xa8, 0x24, 0x4f, 0x55,
    0xfd, 0x98, 0xdc, 0x99, 0x32, 0x9e, 0xdb, 0xdd,
    0x16, 0x28, 0x28, 0x5f, 0x31, 0xb1, 0x03, 0xae,
    0x64, 0xba, 0xa2, 0x50, 0x59, 0xe1, 0xee, 0x65,
    0xf4, 0x44, 0x1b, 0xe0, 0xbb, 0x58, 0xf2, 0x63,
    0xba, 0x2b, 0x1c, 0x03, 0x0d, 0x01, 0xeb, 0xeb,
    0xd6, 0x15, 0x01, 0x79, 0xa1, 0xef, 0x4b, 0x70,
    0x80, 0xf6, 0x28, 0x41, 0x7f, 0xfe, 0x39, 0x63,
    0x52, 0xab, 0x22, 0x46, 0xa2, 0xaf, 0xf8, 0xd9,
    0xc2, 0xf1, 0xdc, 0xc1, 0x38, 0x32, 0x9e, 0x26,
    0x7c, 0x62, 0x5e, 0x37, 0x71, 0x0f, 0x41, 0x10,
    0x0c, 0x6e, 0x27, 0x18, 0xdd, 0x3e, 0xfd, 0x00,
    0xb3, 0xa5, 0x3e, 0x8b, 0x8f, 0x64, 0x86, 0x0d,
    0x4a, 0xe8, 0x8d, 0xc4, 0xa0, 0x1e, 0x78, 0xfe,
    0xae, 0x8f, 0x44, 0xbd, 0x2a, 0x26, 0xbc, 0xab,
    0xcd, 0x5b, 0xd8, 0x96, 0x65, 0xa4, 0xdb, 0x97,
    0x29, 0x89, 0x9b, 0x14, 0x18, 0x07, 0x17, 0x33,
    0x31, 0xb1, 0x03, 0x62, 0x3a, 0x7b, 0x2c, 0x8e,
    0xf2, 0xdf, 0xac, 0x00, 0x0d, 0xf5, 0xe6, 0x53,
    0xf7, 0xfd, 0x6d, 0xe1, 0xeb, 0xad, 0xc3, 0xc3,
    0x93, 0x7d, 0xd3, 0x4c, 0x31, 0x3f, 0xce, 0x58,
    0xea, 0x27, 0x18, 0x4c, 0x72, 0xfc, 0x3e, 0xdc,
    0x8e, 0xc0, 0x93, 0x75, 0xee, 0xdf, 0x00, 0xae,
    0x9a, 0x3b, 0x24, 0xcc, 0x86, 0xbe, 0x25, 0x50,
    0xe9, 0xec, 0x1e, 0xe8, 0xbd, 0xf2, 0x71, 0x2a,
    0x06, 0x06, 0xfd, 0x01, 0x39, 0xf5, 0xa5, 0xf5,
    0x38, 0x5e, 0x33, 0x7d, 0x4a, 0x47, 0x81, 0x0d,
    0x72, 0x02, 0xf8, 0x82, 0xd1, 0xc0, 0xc7, 0x57,
    0xdf, 0x87, 0xdf, 0x4a, 0xa0, 0x7d, 0x4f, 0xb8,
    0xd1, 0x96, 0xae, 0xd2, 0x49, 0xbf, 0x81, 0x76,
    0x2d, 0xdb, 0xfa, 0x8c, 0x31, 0xc5, 0xb8, 0x6c,
    0x65, 0xda, 0x3a, 0x89, 0xf7, 0xa4, 0xc8, 0xde,
    0x14, 0x16, 0x06, 0x08, 0xee, 0x6a, 0xe1, 0x11,
    0xf9, 0x55, 0x2e, 0xa3, 0x32, 0x58, 0x17, 0xf5,
    0x92, 0x06, 0xe5, 0x31, 0x83, 0xe4, 0x31, 0x83,
    0x8e, 0x74, 0x78, 0xfb, 0x36, 0x28, 0xce, 0x73,
    0xac, 0x24, 0x02, 0x65, 0x84, 0x85, 0xbb, 0x34,
    0xf3, 0x7e, 0xe6, 0x55, 0x16, 0x88, 0xd9, 0xce,
    0xa5, 0x15, 0x60, 0x63, 0xc4, 0x56, 0xfc, 0xc5,
    0xbb, 0xa4, 0xba, 0xde, 0xb2, 0x1a, 0x29, 0x6a,
    0xfd, 0x56, 0xc3, 0x48, 0xb2, 0x3b, 0xe0, 0xab,
    0xea, 0xcf, 0x50, 0x9b, 0xf9, 0xac, 0xe2, 0x36,
    0xcd, 0x4b, 0x2f, 0xbd, 0x72, 0xfc, 0x6f, 0x30,
    0x19, 0x6c, 0x1c, 0x89, 0xd8, 0x87, 0x8d, 0x8f,
    0xfa, 0xd1, 0x75, 0x9a, 0xad, 0x8e, 0xf9, 0xf7,
    0x9a, 0x2a, 0xf4, 0x96, 0x84, 0x55, 0x9f, 0x70,
    0xfa, 0x25, 0x61, 0xc1, 0x9e, 0x28, 0x6e, 0xd5,
    0x6d, 0x58, 0x68, 0x34, 0xf4, 0x79, 0xa6, 0xab,
    0xeb, 0xa5, 0x37, 0x1b, 0xf1, 0xd8, 0x35, 0x3e,
    0xcc, 0xbf, 0x98, 0x41, 0xc7, 0xae, 0x25, 0x38,
    0xe4, 0x35, 0x8a, 0x7c, 0x27, 0xff, 0xe5, 0x40,
    0x80, 0x67, 0xbb, 0x61, 0x2b, 0x9d, 0x6d, 0x8a,
    0xb3, 0x9b, 0x2a, 0xf5, 0x64, 0xbe, 0xcd, 0x10,
    0xfc, 0xc6, 0xaa, 0x04, 0xf7, 0x7a, 0xb2, 0x3e,
    0xe7, 0x31, 0x43, 0x07, 0xc7, 0xe6, 0x2f, 0x3d,
    0x49, 0xae, 0x3b, 0x4c, 0xd4, 0xe4, 0x23, 0x45,
    0x66, 0xf3, 0x02, 0x8b, 0x3c, 0x2e, 0x8e, 0x85,
    0x37, 0xde, 0x4b, 0xca, 0x76, 0x31, 0x2c, 0x4b
]

hll_hash_ip(addr::AbstractString) = hll_hash_ip(parse(IPAddr, addr))
hll_hash_ip(addr::IPAddr) = snowflake_hll(hyper_log_log!(key, ip_data(addr)))

end # module
